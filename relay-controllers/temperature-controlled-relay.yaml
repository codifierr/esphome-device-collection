esphome:
  name: temperature-controlled-relay
  friendly_name: temperature-controlled-relay

substitutions:
  # Modify variables based on your settings
  devicename: temperature-controlled-relay

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

# MQTT Configuration
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: true
  discovery_retain: true
  birth_message:
    topic: ${devicename}/status
    payload: online
    retain: true
  will_message:
    topic: ${devicename}/status
    payload: offline
    retain: true

switch:
  - platform: gpio
    pin: GPIO0
    name: "IST Fan Switch"
    id: fan_switch
    inverted: true

  # The following can be omitted
  - platform: restart
    name: ${devicename} restart

sensor:
  - platform: wifi_signal
    name: ${devicename} wifi signal
    update_interval: 30s
    filters:
      - delta: 2.0  # Only send if WiFi signal changes by 2 dBm or more

  - platform: dallas_temp
    address: 0x28FF641A2BFF
    # Replace with your actual Dallas address
    name: ${devicename} temperature
    id: temp_sensor
    update_interval: 10s
    filters:
      - filter_out: nan
      - delta: 0.1 # Only send if temperature changes by 0.1Â°C or more
    on_value_range:
      - above: 44.0
        then:
          - switch.turn_on: fan_switch
      - below: 41.5
        then:
          - switch.turn_off: fan_switch

  # human readable uptime sensor output to the text sensor above
  - platform: uptime
    name: ${devicename} Uptime in Days
    id: uptime_sensor_days
    update_interval: 600s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor_days).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

time:
  - platform: sntp
    id: homeassistant_time
    timezone: "Asia/Kolkata"  # Change to your timezone
    servers:
      - "homeassistant.local"  # Your Home Assistant server with Chrony
      - "pool.ntp.org"         # Fallback server
    update_interval: 15min

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: $devicename Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: $devicename IP
    bssid:
      name: $devicename BSSID

  # human readable update text sensor from sensor:uptime
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    update_interval: 600s

one_wire:
  - platform: gpio
    pin: GPIO2
    
